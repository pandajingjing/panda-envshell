# ngx_core start
error_log {{sBinLogInstallDir}}/error.log error;# 配置日志记录的位置和记录级别,位置可以是文件,syslog,循环内存缓冲区,mail,级别可以是debug,info,notice,warn,error,crit,alert或者emerg,context:main,http,mail,stream,server,location
pid {{sBinPidInstallFile}};# pid文件路径,context:main
user {{sEnvUser}} {{sEnvGroup}};# 工作进程使用的用户和组,如果省略group,则使用user同名的组,context:main
worker_processes {{sBinWorkerProcesses}};# 工作进程的数量,取决于包括(但不限于)CPU核心数, 存储数据的硬盘驱动器数和负载模式.默认1,可以设置auto,让nginx自己检测,context:main
worker_cpu_affinity {{sBinWorkerCpuAffinity}};# 将工作进程绑定到CPU上,每个CPU集由允许的CPU位掩码表示,需要为每个工作进程定义的一个单独的集合.默认不绑定,context:main
worker_rlimit_nofile 65535;# 设置工作进程的最大打开文件数限制,用于不重新启动主进程的情况下增加限制,context:main

events {# 提供配置文件上下文,包括了影响连接处理的指令,context:main
    multi_accept on;# 如果设置为off,则工作进程一次接受一个新连接,否则,工作进程将一次接受所有新连接,默认off,context:events
    use epoll;# 指定要使用的连接处理方法,通常不需要指明,默认使用最有效的方法,context:events
    worker_connections 65535;# 设置工作进程可以打开的最大并发连接数.包括所有连接,不仅仅是与客户端的连接,另外并发连接数不能超过最大打开文件数(worker_rlimit_nofile)的限制,context:events
}
# ngx_core end

http {
    include mime.types;

# ngx_http_charset start
    charset utf-8;# 在响应头中添加Content-Type字段.off则不发送这个头信息.默认off.context:http,server,location,if in location
# charset_types mime-type;# 指定哪些文件添加Content-Type字段.默认text/html text/xml text/plain text/vnd.wap.wml application/javascript application/rss+xml;context:http,server,location
# ngx_http_charset end

# ngx_http_log start
    log_format main '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for"';
    log_format more '"$time_local" $msec $server_addr $request_time $upstream_response_time $remote_addr $upstream_addr $host $request_method $request_uri $server_protocol $status $request_length $bytes_sent $body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for"';
# 日志格式,内置了一个'combined'的格式
# context:http

    access_log {{sBinLogInstallDir}}/access.log more;   
# access_log path [format] [buffer=size] [gzip[=level]] [flush=time] [if=condition]
# access_log off
# off代表不记录
# 路径是绝对或者相对路径,可以是'syslog:'开始写入syslog中.
# 日志可以记在缓存中定时写入(包括超出buffer大小和到达flush的时间以及一个子进程重新打开和关闭日志文件),默认的缓存大小是64K
# 可以设置在内存中日志的压缩级别,1压缩最小,9压缩最大.要支持压缩,需要编译的时候--with-zlib,默认的压缩比是1
# context:http,server,location,if in location,limit_except
    
# open_log_file_cache max=N [inactive=time] [min_uses=N] [valid=time]
# 存储频繁使用的路径中包含变量的日志文件描述符的缓存,使用LRU算法
# max 缓存中最多有多少个描述符
# inactive 当一定时间没有任何访问的描述符就会关闭,默认10秒
# min_uses 如果超过了inactive的时间,但是描述符的使用<=min_uses,则依然保持打开,默认1
# valid 每隔多少时间检查一次缓存中是否存在同名文件
# context: http, server, location
# ngx_http_log end

# ngx_http_core start
    client_body_buffer_size 256k;# 设置读取客户端请求正文的缓冲区大小.如果请求正文大于缓冲区,那整个正文或部分会被写入临时文件.默认缓冲区大小等于两个内存页.x86,其他32位平台,x86-64平台都是8k,其他64位平台是16k.context:http,server,location
    client_body_in_file_only clean;# 设置nginx是否将整个客户端请求body保存到文件中,可以在$request_body_file变量中使用.设置为on时,请求结束时不会删除文件,设置为clean时,请求结束后会删除文件.默认off.context:http,server,location
    client_body_timeout 60s;# 读取客户端请求正文的超时时间,默认60秒,仅计算两次连续的读操作之间的时间,而不是整个请求主题的传输,如果客户端在这个时间内没有传输任何内容,则触发408(Request Time-out)错误,context:http,server,location
    client_body_temp_path /dev/shm/nginx_client_body_temp 1 2;# 设置存储客户端请求body文件的临时目录,最多可以使用3层子目录.默认使用client_body_temp.context:http,server,location
    client_header_buffer_size 4k;# 设置读取客户端请求头的缓冲区大小.对于大多数请求,1K足够了.但如果包含cookie或者是wap客户端,就可能不够.如果请求行或请求头字段超出此大小,则会分配large_client_header_buffers的缓冲区.默认1k.context:http,server
    client_header_timeout 10s;# 读取客户端请求标头的超时时间,如果在这个时间内未传输整个标头,则返回408错误.默认60s.context:http,server
    client_max_body_size 100M;# 客户端请求正文(body)的最大允许大小,默认1m,检查请求标头(header)中的"Content_Length"字段,超过则出发413(Request Entity Too Large)错误,context:http,server,location
    
# directio off | size;# 针对大于size的文件,直接读取磁盘,不从系统或应用缓存中读取.默认关闭.context:http,server,location
    default_type application/octet-stream;# 响应默认的mimetype
    
    keepalive_timeout 65;# 设置保持活动的客户端在服务器端保持打开状态的超时时间.0表示禁用保持活动的客户端连接.第2个参数可以发送一个Keep-Alive: timeout=x的响应头.部分浏览器认识这个头.默认75秒.context:http, server, location
    keepalive_requests 1000;# 设置一个保持活动链接所提供的最大请求数.在发出最大请求数后,将关闭连接.默认100.context:http,server,location
    
    large_client_header_buffers 4 32k;# 设置用于读取大型客户端请求表头的缓冲区的最大数量和大小.一个请求行不能超过一个缓冲区的大小,否则就会触发414错误.请求头字段也不能超过一个缓冲区的大小,否则就会触发400错误.默认是4个8k.context:http,server
    
    output_buffers 1 32k;# 从硬盘读取数据的缓冲区大小和数量.默认1 32k.context:http, server, location
    
    open_file_cache max=1024 inactive=20s;# 配置用于存储以下数据的缓存.打开的文件描述符,大小及编辑时间,存在的目录信息,文件查找错误信息(由open_file_cache_errors控制).max设置在缓存中最多有多少个元素.如果超过数量则遵循LRU原则.inactive表示当元素超过这个时间扔没有被访问则移出缓存,默认60秒.整个配置默认off.context:http,server,location
    open_file_cache_valid 30s;# 设置验证缓存中元素的时间.默认60秒.context:http,server,location
    open_file_cache_min_uses 2;# 当inactive的时间内被移出缓存的文件最小被访问次数.默认1.context:http,server,location
    open_file_cache_errors   on;# 是否缓存文件查找错误.默认off.context:http,server,location
    
    postpone_output 1460;# 客户端数据的传输会被推迟,直到累积到这么多字节的数据.设置为0将会被推迟传输.默认1460.context:http,server,location
# port_in_redirect on;# 在nginx进行重定向时,如果设置为off,则重定向到80端口,如果设置为on,则重定向到当前端口.默认on.context:http,server,location
    
    sendfile on;# 启用和禁用sendfile.当nginx作为静态服务器的时候,开启sendfile能够极大的提高nginx的性能,如果仅把nginx当做反向代理来使用,就没有什么用处了.因为sendfile内部要求操纵的是文件句柄而不是socket,默认off.context:http,server,location,if in location
    send_timeout 60s;# 将响应传输到客户端的超时时间,默认60秒,仅计算两次连续的写操作之间的时间,如果客户端在这个时间内没有收到任何数据则关闭连接,context:http,server,location
    
    server_name_in_redirect on;# 在nginx进行重定向时,如果设置为off,则用服务器的ip进行拼接,如果设置为on,则先查找server_name,如果没有则用HOST头信息,如果还没有才用IP.默认off.context:http,server,location
    server_names_hash_bucket_size 512;# 服务器名称哈希表的存储桶的大小.默认值取决于处理器的缓存行的大小.context:http
    server_names_hash_max_size 512;# 服务器名称哈希表的最大容量.默认值512.context:http
# server_names_hash_* 为了快速处理静态数据,例如:server_names,映射指令的值,MIMEtype,请求头信息的名称,nginx使用哈希表格.在每次启动或者重新配置的时候,nginx重新调整哈希表,从而加快在哈希表中搜索数据的速度
    server_tokens off;# on | off | build | string 是否在错误页面和服务器响应头中发送nginx版本信息.on代表nginx版本信息,build代表编译名称(编译的时候通过--build=xxx传入)和nginx版本信息,商业版中string可以是一个带变量的字符串.默认值on.context:http,server,location
    
    tcp_nopush on;# tcp_nopush与tcp_nodelay互斥,启用nopush后,可以配置一次发送数据包的大小,从而绕过0.2秒后发送包的要求.当包累计到一定大小后才发送,需要与sendfile搭配使用.默认off.context:http,server,location
    tcp_nodelay on;# 启用和禁用tcp_nodelay.启用时,nginx会把缓冲区的数据立刻发送出去.如果关闭后会使用Nagle算法,在tcp堆栈中等待0.2秒后再发送数据,等待过程中将后续的数据包进行合并,从而避免网络发生拥塞.默认on.context:http,server,location
    
    underscores_in_headers on;# 对于header字段中带有'_'的字段,是否设为无效,如果设置无效,则会把'_'过滤后传递.默认off.context:http,server
# ngx_http_core end
    
# ngx_http_proxy start
    proxy_buffer_size 4k;# 设置用于读取从被代理服务器读取第一部分响应的缓冲区的大小.通常包含了响应的头信息.默认的大小是一个内存页面,4k或者8k.不过也可以更小.context:http,server,location
    proxy_buffers 4 32k;# 设置用于读取从被代理服务器读取相应的缓冲区的大小和数量,用于单个连接.默认的大小是一个内存页面,4k或者8k.context:http,server,location
    proxy_buffering on;# 启用或关闭对被代理服务器响应的缓冲.当缓冲打开时,nginx立刻接收被代理服务器的响应,并保存在由proxy_buffer_size和proxy_buffers设置的缓冲区里.如果响应过大,则写入由proxy_max_temp_file_size和proxy_temp_file_write_size设置的临时文件里.如果禁用缓冲时,响应会立刻同步传递给客户端,nginx不会尝试从被代理服务器读取整个响应.nginx一次性可以从服务器接收的最大数据大小由proxy_buffer_size决定.
# 可以通过'X-Accel-Buffering'头信息来传递yes和no来开启和禁用缓冲.可以用proxy_ignore_headers来关闭头信息控制缓冲的功能.context:http,server,location
    proxy_busy_buffers_size 64k;# 当缓冲响应打开时,缓冲一旦被写入,直到数据被全部传输完之前,这块缓冲都是busy的状态,不能进行其他操作.用于设置busy的缓冲的数量.如果需要,可以把响应缓冲到临时文件.默认大小由proxy_buffer_size和proxy_buffers两个缓冲区大小决定.context:http,server,location
    
# proxy_cache MY_PROXY_CACHE;# 设置一个用于缓存的共享的内存区.同样的缓存区可以在多个地方使用.默认off
# proxy_cache_valid 200 302 1h;# 根据不同的状态码设置不同的缓存时间
# proxy_cache_valid 301 1d;
# proxy_cache_valid any 1m;
# proxy_cache_use_stale error timeout invalid_header http_500;# 设置与被代理服务器通信期间,哪些情况下可以使用过期的缓存.默认off.context:http,server,location
# proxy_cache_path /dev/shm/nginx_proxy_cache levels=1:2 keys_zone=MY_PROXY_CACHE:10m inactive=1d max_size=2500m;#context:http
# 设置缓存的路径和其他参数.缓存数据存储在文件中.缓存中的文件名是一个MD5的key.
# levels参数定义了缓存的目录级别.从1到3.每个级别接受的值是1或2.
# 被缓存的响应首先写入一个临时文件,再重命名该文件.从版本0.8.9开始,临时文件和缓存可以放在不同的文件系统中.但是,请注意这种情况下文件将在两个文件系统中进行复制操作而不是简单的重命名.所以不管任何位置的缓存或临时文件目录,都建议保存在用一个文件系统上.
# use_temp_path 用于设置是否使用临时文件目录.默认on.使用的路径由proxy_temp_path决定.设置为off,则临时文件会直接写入缓存目录
# keys_zone 此外,所有的活动key和相关数据都存储在一个共享的内存区.名字和大小由keys_zone参数决定.1兆字节大小大概能存8000个key.
# inactive 超过inactive设定时间的缓存数据将被从缓存中删除.默认10m
# max_size 特殊的"缓存管理器"进程会监视max_size设定的缓存的最大大小.一旦超过大小,就会删除最近最少使用的数据LRU.删除数据是在迭代中完成的.每次迭代删除不超过manager_files(默认100)个项目,一次迭代的持续时间不超过manager_threshold(默认200毫秒)内.每次迭代见,暂停manager_sleep(默认50毫秒)
# 启动一分钟之后,特殊的"缓存加载器"进程会被激活.它会从文件系统中加载之前缓存的数据到缓存区.加载过程也是在迭代中完成.每次迭代加载不超过loader_files(默认100)个项目.此外,一次迭代的持续时间限制在loader_threshold(默认200毫秒)内.每次迭代见,暂停loader_sleep(默认50毫秒)
    proxy_connect_timeout 90;
    
    proxy_redirect off;# 是否修改被代理服务器响应中的Location和Refresh头信息.off代表不做替换
# 默认default,表示把proxy_pass的参数修改为location的参数.即:proxy_redirect '$proxy_pass' '$location'.context:http,server,location
    proxy_read_timeout 90;# 设置从被代理服务器读取响应的超时时间.仅计算两次连续的成功的读操作之间的时间,不是整个响应的传输时间.如果被代理服务器在这个时间内没有传输任何数据,连接将被关闭.context:http,server,location
    
    proxy_send_timeout 90;# 设置往被代理服务器发送请求的超时时间.仅计算两次连续的成功的写操作之间的时间,不是整个响应的传输时间.如果被代理服务器在这个时间内没有接收到任何数据,连接将被关闭.context:http,server,location
    proxy_set_header Host $host;# 重新定义或者添加传递给被代理服务器的请求的头信息.值可以是文本,变量或者是其组合.这个可以从前面的层级继承下来.默认两个头信息Host $proxy_host和Connection close.context:http,server,location
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
        
    proxy_temp_path /dev/shm/nginx_proxy_temp 1 2;# 存储从被代理服务器接收到的数据的临时文件的目录.可以设置

    proxy_temp_file_write_size 128k;# 当缓存被代理服务器响应到临时文件的功能打开时,限制一次写入临时文件的数据大小
# ngx_http_proxy end

# ngx_http_fastcgi start
    fastcgi_buffer_size 64k;# 同proxy_buffer_size
    fastcgi_buffers 4 64k;# 同proxy_buffers
    fastcgi_buffering on;# 同proxy_buffering
    fastcgi_busy_buffers_size 128k;# 同proxy_busy_buffers_size
    
# fastcgi_cache MY_FASTCGI_CACHE;# 同proxy_cache
# fastcgi_cache_key "$scheme$request_method$host$request_uri";# 设置fastcgi缓存查询的key
# fastcgi_cache_valid 200 302 1h;# 根据不同的状态码设置不同的缓存时间
# fastcgi_cache_valid 301 1d;
# fastcgi_cache_valid any 1m;
# fastcgi_cache_use_stale error timeout invalid_header http_500;# 设置与fastcgi服务器通信期间,哪些情况下可以使用过期的缓存.默认off.context:http,server,location
# fastcgi_cache_path /dev/shm/nginx_fastcgi_cache levels=1:2 keys_zone=MY_FASTCGI_CACHE:10m inactive=1d max_size=2500m;
    
    fastcgi_connect_timeout 300;# 与fastcgi服务器建立连接的超时时间,默认60秒,建议不超过75秒,context:http,server,location
    
    fastcgi_intercept_errors on;# 设置fastcgi服务器发送大于等于300的状态码时,是将响应传递给客户端还是拦截并重定向到nginx的错误页
    
    fastcgi_read_timeout 300;# 从fastcgi服务器读取响应的超时时间,默认60秒,仅计算两次连续的读操作之间的时间,如果fastcgi服务器再这个时间内没有发出任何数据则关闭连接,context:http,server,location
    fastcgi_send_timeout 300;# 将请求传输到fastcgi服务器的超时时间,默认60秒,仅计算两次连续的写操作之间的时间,如果fastcgi服务器在这个时间内没有收到任何数据则关闭连接,context:http,server,location
    fastcgi_temp_file_write_size 128k;# 同proxy_temp_file_write_size
# ngx_http_fastcgi end

# ngx_http_gzip start
    gzip on;# 设置是否对响应进行gzip压缩
    gzip_buffers 32 8k;# 设置用于压缩响应的缓存数量和大小.默认下是等于一个内存页.可能是4k或者8k.context:http,server,location
    gzip_comp_level 3;# 设置压缩响应的压缩级别,可以是1-9.默认1
# gzip_disable reg;# 对符合reg正则表达式的user-agent的请求关闭压缩功能
    gzip_http_version 1.0;# 设置可以发送压缩相应的请求最小的http版本.可以是1.0或者1.1.默认1.1
    gzip_min_length 1024;# 设置进行压缩的响应的最小长度,根据Content-Length判定.默认20
    gzip_proxied expired no-cache no-store private auth;# 根据请求和响应开启或禁用压缩代理的请求的相应.请求是否被代理由请求头中的Via字段决定.默认off.可以接受以下参数:
# off 所有的代理请求都关闭压缩
# expired 如果请求头中包含Expires字段,对应的值为禁用缓存的值,则打开压缩
# no-cache 如果请求头中包含Cache-Control字段,对应的值为no-cache,则打开压缩
# no-store 如果请求头中包含Cache-Control字段,对应的值为no-store,则打开压缩
# private 如果请求头中包含Cache-Control字段,对应的值为private,则打开压缩
# no_last_modified 如果请求头中不包含Last-Modified字段,则打开压缩
# no_etag 如果请求头中不包含ETag字段,则打开压缩
# auth 如果请求头中包含Authorization字段,则打开压缩
# any 所有的代理请求都压缩
    gzip_types text/css text/xml text/plain image/gif image/jpeg image/png image/x-icon application/javascript application/json;# 进行压缩的mimetype
    gzip_vary on;# 如果发生了gzip,在响应头中添加一个'Vary:Accept-Encoding'的头
# ngx_http_gzip end
    
# ngx_http_gzip_static start
    gzip_static on;# 对于可以压缩的文件,优先读取有.gz后缀的文件进行发送.默认off.context:http,server,location
# ngx_http_gzip_static end

# upload_progress start
    upload_progress uploads 1m;# 打开上传文件进度跟踪模块的功能，并命名用于存储每个连接的跟踪信息的区域名称和区域大小
    upload_progress_json_output;# 使用json输出
    upload_progress_header my-upload-track-id;# 自定义进度跟踪的头信息名称
# upload_progress end

    include conf.d/*.upstream;
    include conf.d/*.server;
    include conf.d/*.proxy;
}