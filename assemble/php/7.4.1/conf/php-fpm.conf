; 配置文件中的相对目录都是基于安装目录({{sBinInstallDir}})的
[global]
pid = {{sBinPidInstallFile}}; pid文件路径,默认run/php-fpm.pid
error_log = {{sBinLogInstallDir}}/php-fpm.error.log; 错误日志路径,可以设置为syslog,默认log/php-fpm.log
; syslog.facility = daemon; syslog记录日志时的设备,默认daemon
; syslog.ident = php-fpm; syslog记录日志时的识别方式,默认php-fpm
log_level = notice; 日志记录级别,包括alert, error, warning, notice, debug,默认notice
emergency_restart_threshold = 10; 设置在emergency_restart_interval的时间内,出现emergency_restart_threshold个SIGSEGV或者SIGBUS错误就会平滑重启php-fpm,默认0,表示关闭
emergency_restart_interval = 60s; 设置平滑重启php-fpm的间隔时间.这对于解决加速器共享内存中出现的意外损坏非常有用.单位可以是:s秒,m分,h小时,d日.默认0,表示关闭
process_control_timeout = 5s; 子进程等待接受主进程信号的超时时间,如果子进程在这个时间内没有响应主进程给的进程复用信号,主进程就会找其他子进程.默认0,表示关闭
process.max = 300; 最大子进程数量,主要针对多pool且dynamic方式使用的时候,避免全局子进程数量超出.默认0,表示无限
; process.priority = -19; 用于处理子进程的优先级,当主进程用root用户启动时有效,如果有设置,子进程会继承主进程的优先级.范围从-19(最高)到20(最低),默认不设置
daemonize = yes; 将fpm转为后台进程,设置为no则为前台运行方便调试.默认yes
rlimit_files = 65535; 主进程打开文件描述符的限制,默认操作系统配置
rlimit_core = unlimited; 主进程核心大小的限制,可以为unlimited, 0或者大于0的整数.默认操作系统配置
events.mechanism = epoll; 指定fpm使用的事件机制.可以为select(POSIX), poll(POSIX), epoll(linux>=2.5.4), kqueue(FreeBSD>=4.1, OpenBSD>=2.9, NetBSD>=2.0), /dev/poll(Solaris>=7), port(Solaris>=10).默认为不设置,会自动检测
;systemd_interval = 10; 当fpm与systemd集成后, 可以向systemd间隔时间报告健康状况.设置0可以关闭,单位可以是:s秒,m分,h小时.默认是10秒

; pool的个数理论上没有上限
; $pool可以在任何地方引用,表示pool的名称
[www1]
; prefix = /path/to/pools/$pool; 会在以下配置生效: access.log, slowlog, listen(unix socket), chroot, chdir, php_values, php_admin_values.如果没有设置,则是全局的prefix,即{{sBinInstallDir}}
user = {{sEnvUser}}; 托管子进程的用户名
group = {{sEnvGroup}}; 托管子进程的用户组, 如果不设置,则使用用户名对应的用户组
listen = /dev/shm/php-fpm1.sock; 接受FastCGI请求的地址.可以是:ip:port, port, /path/to/unix/socket
listen.backlog = 128; 用于设置挂起连接队列的最大长度,默认128
listen.owner = {{sEnvUser}}; 监听unix socket的权限, 需要读写权限, 默认是0660
listen.group = {{sEnvGroup}}; 监听unix socket的权限, 需要读写权限, 默认是0660
listen.mode = 0660; 监听unix socket的权限, 需要读写权限, 默认是0660
listen.allowed_clients = 127.0.0.1; 可以连接FastCGI客户端的地址,用逗号分割.留空表示所有地址都可以.默认留空
; process.priority = -19; 用于处理子进程的优先级,当主进程用root用户启动时有效,如果有设置,子进程会继承主进程的优先级.范围从-19(最高)到20(最低),默认不设置

; 设置进程管理者如何控制子进程的数量
;pm = ondemand; 开始时是0个子进程,当新请求进来时,创建子进程,使用pm.max_children和pm.process_idel_timeout参数控制行为
;pm = static; 静态,一直维持pm.max_children个固定数量的子进程
pm = dynamic; 动态,至少有一个子进程,子进程的数量使用pm.max_children,pm.start_servers,pm.min_spare_servers,pm.max_spare_servers参数动态控制
pm.max_children = 50; static|dynamic|ondemand方式下,最多开启的php-fpm进程数量
pm.start_servers = 15; dynamic方式下,起始的php-fpm进程数量,默认min_spare_servers+(max_spare_servers-min_spare_servers)/2.
pm.min_spare_servers = 10; dynamic方式下,最小空闲的php-fpm进程数量
pm.max_spare_servers = 20; dynamic方式下,最多空闲的php-fpm进程数量
pm.process_idle_timeout = 10s; ondemand方式下,闲置进程超过这个时间就会退出,默认10秒
pm.max_requests = 1024; 发送多少个请求后会重启php-fpm进程,0代表不重启,默认0
pm.status_path = /status1; fpm的状况数据,默认没有设置
ping.path = /ping1; fpm监控页,默认没有设置
;ping.response = pong; 自定义fpm对于ping请求的响应,默认pong

access.log = {{sBinLogInstallDir}}/php-fpm.$pool.access.log; 访问日志,默认没有设置
access.format = "\"%t\" %{mili}d %R %n %m %r%Q%q %s %f %l %{kilo}M %C%% %p %P"
;  %%: %符号
;  %C: 请求使用的CPU百本比,接受如下格式:
;      - %{user}C for user CPU only
;      - %{system}C for system CPU only
;      - %{total}C  for user + system CPU (default)
;  %d: 请求需要的时间,接受如下格式:
;      - %{seconds}d (default)
;      - %{miliseconds}d
;      - %{mili}d
;      - %{microseconds}d
;      - %{micro}d
;  %e: 环境变量,必须用大花括弧括起来.例如:
;      - server specifics like: %{REQUEST_METHOD}e or %{SERVER_PROTOCOL}e
;      - HTTP headers like: %{HTTP_HOST}e or %{HTTP_USER_AGENT}e
;  %f: 脚本文件名
;  %l: 请求长度(仅POST)
;  %m: 请求方式
;  %M: PHP占用的内存的峰值
;      it can accept the following format:
;      - %{bytes}M (default)
;      - %{kilobytes}M
;      - %{kilo}M
;      - %{megabytes}M
;      - %{mega}M
;  %n: pool名字
;  %o: 响应的头信息
;      it must be associated with embraces to specify the name of the header:
;      - %{Content-Type}o
;      - %{X-Powered-By}o
;      - %{Transfert-Encoding}o
;      - ....
;  %p: 响应请求的子进程的pid
;  %P: 响应请求的子进程的父进程的pid
;  %q: 查询字符串
;  %Q: 带'?'的查询字符串
;  %r: 请求的URI,不带查询字符串
;  %R: 远程IP
;  %s: 响应状态码
;  %t: 接收到响应时的服务器时间,接受strftime的格式,格式必须包含在%{<strftime_format}t中
;      %d/%b/%Y:%H:%M:%S %z (default)
;      e.g. for a ISO8601 formatted timestring, use: %{%Y-%m-%dT%H:%M:%S%z}t
;  %T: 日志写入时的服务器时间(请求结束时),接受strftime的格式,格式必须包含在%{<strftime_format}t中
;      %d/%b/%Y:%H:%M:%S %z (default)
;      e.g. for a ISO8601 formatted timestring, use: %{%Y-%m-%dT%H:%M:%S%z}t
;  %u: 远程用户
; Default: "%R - %u %t \"%m %r\" %s"
; access.format = "%R - %u %t \"%m %r%Q%q\" %s %f %{mili}d %{kilo}M %C%%"

slowlog = {{sBinLogInstallDir}}/php-fpm.$pool.slow.log; 慢查询日志,默认没有设置
request_slowlog_timeout = 2s; 超过2秒的请求作为慢日志,0秒为关闭,单位可以是s秒,m分钟,h小时,d天,默认单位是秒.默认0秒
request_terminate_timeout = 30s; 子进程执行单个请求的最大执行时间,超过这个时间子进程会被杀死.0秒为关闭,单位可以是s秒,m分钟,h小时,d天,默认单位是秒.默认0秒
;chroot =; 使用绝对路径
;chdir =; 可以使用相对路径
catch_workers_output = yes; 将子进程的stdout和stderr写到主error log中.如果没有设置,就会将stdout和stderr写入到/dev/null中.在高负载环境中,可能造成一些延迟,默认no
;clear_env = no; 创建主进程的时候,是否清除环境变量.如果设置为yes,那子进程里getenv()就不能访问到$_ENV和$_SERVER的数据了,默认yes
security.limit_extensions = .php .php3 .php4 .php5; 允许fpm解析文件的后缀名,逗号分隔,留空表示可以解析所有后缀.默认.php
;env[HOSTNAME] = $HOSTNAME; 传递环境变量
;php_value/php_flag; 添加php.ini中的定义,仅针对当前pool的子进程.有的值会覆盖,有的值是添加

[www2]
; prefix = /path/to/pools/$pool; 会在以下配置生效: access.log, slowlog, listen(unix socket), chroot, chdir, php_values, php_admin_values.如果没有设置,则是全局的prefix,即{{sBinInstallDir}}
user = {{sEnvUser}}; 托管子进程的用户名
group = {{sEnvGroup}}; 托管子进程的用户组, 如果不设置,则使用用户名对应的用户组
listen = /dev/shm/php-fpm2.sock; 接受FastCGI请求的地址.可以是:ip:port, port, /path/to/unix/socket
listen.backlog = 128; 用于设置挂起连接队列的最大长度,默认128
listen.owner = {{sEnvUser}}; 监听unix socket的权限, 需要读写权限, 默认是0660
listen.group = {{sEnvGroup}}; 监听unix socket的权限, 需要读写权限, 默认是0660
listen.mode = 0660; 监听unix socket的权限, 需要读写权限, 默认是0660
listen.allowed_clients = 127.0.0.1; 可以连接FastCGI客户端的地址,用逗号分割.留空表示所有地址都可以.默认留空
; process.priority = -19; 用于处理子进程的优先级,当主进程用root用户启动时有效,如果有设置,子进程会继承主进程的优先级.范围从-19(最高)到20(最低),默认不设置

; 设置进程管理者如何控制子进程的数量
;pm = ondemand; 开始时是0个子进程,当新请求进来时,创建子进程,使用pm.max_children和pm.process_idel_timeout参数控制行为
;pm = static; 静态,一直维持pm.max_children个固定数量的子进程
pm = dynamic; 动态,至少有一个子进程,子进程的数量使用pm.max_children,pm.start_servers,pm.min_spare_servers,pm.max_spare_servers参数动态控制
pm.max_children = 50; static|dynamic|ondemand方式下,最多开启的php-fpm进程数量
pm.start_servers = 15; dynamic方式下,起始的php-fpm进程数量,默认min_spare_servers+(max_spare_servers-min_spare_servers)/2.
pm.min_spare_servers = 10; dynamic方式下,最小空闲的php-fpm进程数量
pm.max_spare_servers = 20; dynamic方式下,最多空闲的php-fpm进程数量
pm.process_idle_timeout = 10s; ondemand方式下,闲置进程超过这个时间就会退出,默认10秒
pm.max_requests = 1024; 发送多少个请求后会重启php-fpm进程,0代表不重启,默认0
pm.status_path = /status1; fpm的状况数据,默认没有设置
ping.path = /ping1; fpm监控页,默认没有设置
;ping.response = pong; 自定义fpm对于ping请求的响应,默认pong

access.log = {{sBinLogInstallDir}}/php-fpm.$pool.access.log; 访问日志,默认没有设置
access.format = "\"%t\" %{mili}d %R %n %m %r%Q%q %s %f %l %{kilo}M %C%% %p %P"

slowlog = {{sBinLogInstallDir}}/php-fpm.$pool.slow.log; 慢查询日志,默认没有设置
request_slowlog_timeout = 2s; 超过2秒的请求作为慢日志,0秒为关闭,单位可以是s秒,m分钟,h小时,d天,默认单位是秒.默认0秒
request_terminate_timeout = 30s; 子进程执行单个请求的最大执行时间,超过这个时间子进程会被杀死.0秒为关闭,单位可以是s秒,m分钟,h小时,d天,默认单位是秒.默认0秒
;chroot =; 使用绝对路径
;chdir =; 可以使用相对路径
catch_workers_output = yes; 将子进程的stdout和stderr写到主error log中.如果没有设置,就会将stdout和stderr写入到/dev/null中.在高负载环境中,可能造成一些延迟,默认no
;clear_env = no; 创建主进程的时候,是否清除环境变量.如果设置为yes,那子进程里getenv()就不能访问到$_ENV和$_SERVER的数据了,默认yes
security.limit_extensions = .php .php3 .php4 .php5; 允许fpm解析文件的后缀名,逗号分隔,留空表示可以解析所有后缀.默认.php
;env[HOSTNAME] = $HOSTNAME; 传递环境变量
;php_value/php_flag; 添加php.ini中的定义,仅针对当前pool的子进程.有的值会覆盖,有的值是添加